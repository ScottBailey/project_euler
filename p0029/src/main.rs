/*

https://projecteuler.net

Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

     2^2=4, 2^3=8, 2^4=16, 2^5=32
     3^2=9, 3^3=27, 3^4=81, 3^5=243
     4^2=16, 4^3=64, 4^4=256, 4^5=1024
     5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed,
we get the following sequence of 15 distinct terms:

     4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a
≤ 100 and 2 ≤ b ≤ 100?

*/

use num_bigint::BigUint;

fn solve() -> usize {
    let mut v = std::vec::Vec::<BigUint>::with_capacity(99*99);

    for a in 2..=100_u64 {
        for b in 2..=100 {
            let mut num = BigUint::from(a);
            num = num.pow(b);
            if let Err(ins) = v.binary_search(&num) {
                v.insert(ins,num);
            }
        }
    }

    return v.len();
}


fn main() {
    let start_time = std::time::Instant::now();

    let sol = solve();

    let elapsed = start_time.elapsed().as_micros();
    println!("\nSolution: {}", sol);

    //println!("Elasped time: {} us", elapsed);

    let mut remain = elapsed;
    let mut s = String::new();
    if remain == 0 {
        s.insert(0,'0');
    }
    while remain > 0 {
        let temp = remain%1000;
        remain /= 1000;
        if remain > 0 {
            s = format!(",{:03}",temp) + &s;
        }
        else {
            s = format!("{}",temp) + &s;
        }
    }
    println!("Elasped time: {} us", s);


}
